void WriteBmpToFile(HBITMAP hBitmap,CString m_str_save_path)  
{  
    HDC hDC =::CreateDC("DISPLAY",NULL,NULL,NULL);   
    int iBits = ::GetDeviceCaps(hDC, BITSPIXEL) * ::GetDeviceCaps(hDC, PLANES);//当前分辨率下每个像素所占字节数    
    ::DeleteDC(hDC);  

    WORD   wBitCount;   //位图中每个像素所占字节数      
    if (iBits <= 1)  
        wBitCount = 1;  
    else if (iBits <= 4)  
        wBitCount = 4;  
    else if (iBits <= 8)  
        wBitCount = 8;  
    else if (iBits <= 24)  
        wBitCount = 24;  
    else  
        wBitCount = iBits;  

    DWORD   dwPaletteSize=0;    //调色板大小， 位图中像素字节大小   
    if (wBitCount <= 8)        
        dwPaletteSize = (1 << wBitCount) *    sizeof(RGBQUAD);      


    BITMAP  bm;        //位图属性结构  
    ::GetObject(hBitmap, sizeof(bm), (LPSTR)&bm);    


    BITMAPINFOHEADER   bi;       //位图信息头结构       
    bi.biSize            = sizeof(BITMAPINFOHEADER);    
    bi.biWidth           = bm.bmWidth;  
    bi.biHeight          = bm.bmHeight;  
    bi.biPlanes          = 1;  
    bi.biBitCount        = wBitCount;  
    bi.biCompression     = BI_RGB; //BI_RGB表示位图没有压缩  
    bi.biSizeImage       = 0;  
    bi.biXPelsPerMeter   = 0;  
    bi.biYPelsPerMeter   = 0;  
    bi.biClrUsed         = 0;  
    bi.biClrImportant    = 0;  

    DWORD dwBmBitsSize = ((bm.bmWidth * wBitCount+31)/32) * 4 * bm.bmHeight;      
    HANDLE hDib  = ::GlobalAlloc(GHND,dwBmBitsSize + dwPaletteSize + sizeof(BITMAPINFOHEADER));  //为位图内容分配内存  
    LPBITMAPINFOHEADER lpbi = (LPBITMAPINFOHEADER)GlobalLock(hDib);  
    *lpbi = bi;  

    HANDLE hPal = ::GetStockObject(DEFAULT_PALETTE);  // 处理调色板   
    HANDLE  hOldPal=NULL;   
    if (hPal)  
    {  
        hDC = ::GetDC(NULL);  
        hOldPal = SelectPalette(hDC,(HPALETTE)hPal, FALSE);  
        RealizePalette(hDC);  
    }  
    ::GetDIBits(hDC, hBitmap, 0, (UINT) bm.bmHeight,(LPSTR)lpbi + sizeof(BITMAPINFOHEADER)+dwPaletteSize,(BITMAPINFO*)lpbi,DIB_RGB_COLORS);// 获取该调色板下新的像素值  
    if (hOldPal)//恢复调色板  
    {  
        SelectPalette(hDC, (HPALETTE)hOldPal, TRUE);  
        RealizePalette(hDC);  
        ::ReleaseDC(NULL, hDC);  
    }     

    BITMAPFILEHEADER   bmfHdr; //位图文件头结构       
    bmfHdr.bfType = 0x4D42;  // "BM"    // 设置位图文件头  
    DWORD dwDIBSize = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER) + dwPaletteSize + dwBmBitsSize;    
    bmfHdr.bfSize = dwDIBSize;  
    bmfHdr.bfReserved1 = 0;  
    bmfHdr.bfReserved2 = 0;  
    bmfHdr.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER) + dwPaletteSize;  

    HANDLE hFile = CreateFile(m_str_save_path, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL | FILE_FLAG_SEQUENTIAL_SCAN, NULL);//创建位图文件     
    DWORD dwWritten;  
    WriteFile(hFile, (LPSTR)&bmfHdr, sizeof(BITMAPFILEHEADER), &dwWritten, NULL);   // 写入位图文件头  
    WriteFile(hFile, (LPSTR)lpbi, dwDIBSize, &dwWritten, NULL);// 写入位图文件其余内容  

    GlobalUnlock(hDib);   //清除     
    GlobalFree(hDib);  
    CloseHandle(hFile);       

} 

void CopyBmpToClipBoard(HBITMAP hBitmap)  
{  
    OpenClipboard(NULL) ;   //打开剪贴板，并将位图拷到剪贴板上   
    EmptyClipboard();   
    SetClipboardData(CF_BITMAP, hBitmap);  
    CloseClipboard();   //关闭剪贴板    
}  

void ClearningOPENCVDlg::OnBnClickedButton1()
{
//获取屏幕截图
    CString savesPath;
    for(int i = 0;i < 240; i++){
    savesPath.Format("D:\\shot\\shot%d.bmp",i);
    saveScreen(savesPath);
    }

}

void ClearningOPENCVDlg::saveScreen(CString savesPath)
{
    Sleep(1);
    HWND hWnd = ::GetDesktopWindow();//获得屏幕的HWND.  
    HDC hScreenDC = ::GetDC(hWnd);   //获得屏幕的HDC.  
    HDC MemDC = ::CreateCompatibleDC(hScreenDC);  
    RECT rect;   
    ::GetWindowRect(hWnd,&rect);  
    SIZE screensize;  
    screensize.cx=rect.right-rect.left;  
    screensize.cy=rect.bottom-rect.top;  
    HBITMAP hBitmap = ::CreateCompatibleBitmap(hScreenDC,screensize.cx,screensize.cy);  
    HGDIOBJ hOldBMP = ::SelectObject(MemDC,hBitmap);  
    ::BitBlt(MemDC,0,0,screensize.cx,screensize.cy,hScreenDC,rect.left,rect.top,SRCCOPY);  
    ::SelectObject(MemDC,hOldBMP);  
    ::DeleteObject(MemDC);  
    ::ReleaseDC(hWnd,hScreenDC);  
    //  if(this->m_bSaveToFile)  
    WriteBmpToFile(hBitmap,savesPath);
}
