static void
    getThreshVal_Otsu_8u( const Mat& _src,double &maxvalue,double &maxvalue_right , int method )
{
    Size size = _src.size();
    if( _src.isContinuous() )
    {
        size.width *= size.height;
        size.height = 1;
    }
    const int N = 256;
    int i, j, h[N] = {0};

    for( i = 0; i < size.height; i++ )
    {
        const uchar* src = _src.data + _src.step*i;
        for( j = 0; j <= size.width - 4; j += 4 )
        {
            int v0 = src[j], v1 = src[j+1];
            h[v0]++; h[v1]++;
            v0 = src[j+2]; v1 = src[j+3];
            h[v0]++; h[v1]++;
        }
        for( ; j < size.width; j++ )
            h[src[j]]++;
    }

    double mu = 0, scale = 1./(size.width*size.height);
    for( i = 0; i < N; i++ )
        mu += i*(double)h[i];
    double mu1 = 0,mu2 = 0;
    mu *= scale;
    //mu平均灰度值
    //mu1左边的平均灰度
    //mu2右边的平均灰度
    //q1左边的像素数目
    //q2右边的
    double q1 = 0;

    //sigma方差
    double max_sigma = 0, max_val = 0,max_val_right = 0;

    if(method == 0){
        for( i = 0; i < N - 1; i++ )
        {
            double p_i, q2 = 0, sigma = 0;

            p_i = h[i]*scale;
            mu1 *= q1;
            q1 += p_i;
            if(q1 < FLT_EPSILON || q1 > 1. - FLT_EPSILON )
                continue;
            mu1 = (mu1 + i*p_i)/q1;
            for( j = i + 1; j < N; j++ ){

                double p_j, q3, mu3;
                p_j = h[j]*scale;
                mu2 *= q2;
                q2 += p_j;
                q3 = 1. - q1 - q2;
                if( min(min(q1,q2),q3) < FLT_EPSILON || max(max(q1,q2),q3) > 1. - FLT_EPSILON )
                    continue;

                mu2 = (mu2 + j*p_j)/q2;
                mu3 = (mu - q1*mu1 - q2*mu2)/q3;
                sigma =  q1*(mu - mu1)*(mu - mu1) +  q2*(mu2 - mu)*(mu2 - mu) +   q3 * (mu3 - mu)*(mu3 - mu);
                if( sigma > max_sigma )
                {
                    max_sigma = sigma;
                    max_val = i;
                    max_val_right = j;
                }
            }

        }

        maxvalue = max_val;
        maxvalue_right = max_val_right;
    }
    else{
        for( i = 0; i < N; i++ )
        {
            double p_i, q2, mu2, sigma;

            p_i = h[i]*scale;
            mu1 *= q1;
            q1 += p_i;
            q2 = 1. - q1;

            if( min(q1,q2) < FLT_EPSILON || max(q1,q2) > 1. - FLT_EPSILON )
                continue;

            mu1 = (mu1 + i*p_i)/q1;
            mu2 = (mu - q1*mu1)/q2;
            sigma = q1*q2*(mu1 - mu2)*(mu1 - mu2);
            if( sigma > max_sigma )
            {
                max_sigma = sigma;
                max_val = i;
            }
        }

        maxvalue = max_val;
        maxvalue_right = 255;
    }

    
}
